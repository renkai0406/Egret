//--------------------------------------------------
// <auto-generated>
//      本文件由《纳米娱乐-游戏编辑器-数据工具》自动生成
// </auto-generated>
//--------------------------------------------------
var __reflect = (this && this.__reflect) || function (p, c, t) {
    p.__class__ = c, t ? t.push(c) : t = [c], p.__types__ = p.__types__ ? t.concat(p.__types__) : t;
};
var __extends = this && this.__extends || function __extends(t, e) { 
 function r() { 
 this.constructor = t;
}
for (var i in e) e.hasOwnProperty(i) && (t[i] = e[i]);
r.prototype = e.prototype, t.prototype = new r();
};
var ConfigMng = (function (_super) {
    __extends(ConfigMng, _super);
    function ConfigMng() {
        var _this = _super.call(this) || this;
        ConfigMng._instance = _this;
        return _this;
    }
    Object.defineProperty(ConfigMng, "Instance", {
        get: function () {
            return ConfigMng._instance;
        },
        enumerable: true,
        configurable: true
    });
    ConfigMng.prototype.GetResMap = function () {
        var resMap = new nano.Map();
        resMap.Add("AchievementConfig", "Achievement_bytes");
        resMap.Add("AdviserConfig", "Adviser_bytes");
        resMap.Add("GeneralConfig", "General_bytes");
        resMap.Add("HegemonyConfig", "Hegemony_bytes");
        resMap.Add("ItemConfig", "Item_bytes");
        resMap.Add("LevelConfig", "Level_bytes");
        resMap.Add("MineConfig", "Mine_bytes");
        resMap.Add("OfficeConfig", "Office_bytes");
        resMap.Add("SkillConfig", "Skill_bytes");
        resMap.Add("StarConfig", "Star_bytes");
        resMap.Add("TaskConfig", "Task_bytes");
        resMap.Add("TigerDragonConfig", "TigerDragon_bytes");
        return resMap;
    };
    ConfigMng.prototype.GetAchievementConfig = function (id) {
        return this.GetConfigBase("AchievementConfig", id);
    };
    ConfigMng.prototype.HasAchievementConfig = function (id) {
        return this.HasConfigBase("AchievementConfig", id);
    };
    ConfigMng.prototype.GetAllAchievementConfig = function () {
        var configMap = new nano.Map();
        var map = this.GetAllConfigBase("AchievementConfig");
        var keys = map.Keys();
        for (var i = 0; i < keys.length; i++) {
            configMap.Add(keys[i], map.Get(keys[i]));
        }
        return configMap;
    };
    ConfigMng.prototype.GetAdviserConfig = function (id) {
        return this.GetConfigBase("AdviserConfig", id);
    };
    ConfigMng.prototype.HasAdviserConfig = function (id) {
        return this.HasConfigBase("AdviserConfig", id);
    };
    ConfigMng.prototype.GetAllAdviserConfig = function () {
        var configMap = new nano.Map();
        var map = this.GetAllConfigBase("AdviserConfig");
        var keys = map.Keys();
        for (var i = 0; i < keys.length; i++) {
            configMap.Add(keys[i], map.Get(keys[i]));
        }
        return configMap;
    };
    ConfigMng.prototype.GetGeneralConfig = function (id) {
        return this.GetConfigBase("GeneralConfig", id);
    };
    ConfigMng.prototype.HasGeneralConfig = function (id) {
        return this.HasConfigBase("GeneralConfig", id);
    };
    ConfigMng.prototype.GetAllGeneralConfig = function () {
        var configMap = new nano.Map();
        var map = this.GetAllConfigBase("GeneralConfig");
        var keys = map.Keys();
        for (var i = 0; i < keys.length; i++) {
            configMap.Add(keys[i], map.Get(keys[i]));
        }
        return configMap;
    };
    ConfigMng.prototype.GetHegemonyConfig = function (id) {
        return this.GetConfigBase("HegemonyConfig", id);
    };
    ConfigMng.prototype.HasHegemonyConfig = function (id) {
        return this.HasConfigBase("HegemonyConfig", id);
    };
    ConfigMng.prototype.GetAllHegemonyConfig = function () {
        var configMap = new nano.Map();
        var map = this.GetAllConfigBase("HegemonyConfig");
        var keys = map.Keys();
        for (var i = 0; i < keys.length; i++) {
            configMap.Add(keys[i], map.Get(keys[i]));
        }
        return configMap;
    };
    ConfigMng.prototype.GetItemConfig = function (id) {
        return this.GetConfigBase("ItemConfig", id);
    };
    ConfigMng.prototype.HasItemConfig = function (id) {
        return this.HasConfigBase("ItemConfig", id);
    };
    ConfigMng.prototype.GetAllItemConfig = function () {
        var configMap = new nano.Map();
        var map = this.GetAllConfigBase("ItemConfig");
        var keys = map.Keys();
        for (var i = 0; i < keys.length; i++) {
            configMap.Add(keys[i], map.Get(keys[i]));
        }
        return configMap;
    };
    ConfigMng.prototype.GetLevelConfig = function (id) {
        return this.GetConfigBase("LevelConfig", id);
    };
    ConfigMng.prototype.HasLevelConfig = function (id) {
        return this.HasConfigBase("LevelConfig", id);
    };
    ConfigMng.prototype.GetAllLevelConfig = function () {
        var configMap = new nano.Map();
        var map = this.GetAllConfigBase("LevelConfig");
        var keys = map.Keys();
        for (var i = 0; i < keys.length; i++) {
            configMap.Add(keys[i], map.Get(keys[i]));
        }
        return configMap;
    };
    ConfigMng.prototype.GetMineConfig = function (id) {
        return this.GetConfigBase("MineConfig", id);
    };
    ConfigMng.prototype.HasMineConfig = function (id) {
        return this.HasConfigBase("MineConfig", id);
    };
    ConfigMng.prototype.GetAllMineConfig = function () {
        var configMap = new nano.Map();
        var map = this.GetAllConfigBase("MineConfig");
        var keys = map.Keys();
        for (var i = 0; i < keys.length; i++) {
            configMap.Add(keys[i], map.Get(keys[i]));
        }
        return configMap;
    };
    ConfigMng.prototype.GetOfficeConfig = function (id) {
        return this.GetConfigBase("OfficeConfig", id);
    };
    ConfigMng.prototype.HasOfficeConfig = function (id) {
        return this.HasConfigBase("OfficeConfig", id);
    };
    ConfigMng.prototype.GetAllOfficeConfig = function () {
        var configMap = new nano.Map();
        var map = this.GetAllConfigBase("OfficeConfig");
        var keys = map.Keys();
        for (var i = 0; i < keys.length; i++) {
            configMap.Add(keys[i], map.Get(keys[i]));
        }
        return configMap;
    };
    ConfigMng.prototype.GetSkillConfig = function (id) {
        return this.GetConfigBase("SkillConfig", id);
    };
    ConfigMng.prototype.HasSkillConfig = function (id) {
        return this.HasConfigBase("SkillConfig", id);
    };
    ConfigMng.prototype.GetAllSkillConfig = function () {
        var configMap = new nano.Map();
        var map = this.GetAllConfigBase("SkillConfig");
        var keys = map.Keys();
        for (var i = 0; i < keys.length; i++) {
            configMap.Add(keys[i], map.Get(keys[i]));
        }
        return configMap;
    };
    ConfigMng.prototype.GetStarConfig = function (id) {
        return this.GetConfigBase("StarConfig", id);
    };
    ConfigMng.prototype.HasStarConfig = function (id) {
        return this.HasConfigBase("StarConfig", id);
    };
    ConfigMng.prototype.GetAllStarConfig = function () {
        var configMap = new nano.Map();
        var map = this.GetAllConfigBase("StarConfig");
        var keys = map.Keys();
        for (var i = 0; i < keys.length; i++) {
            configMap.Add(keys[i], map.Get(keys[i]));
        }
        return configMap;
    };
    ConfigMng.prototype.GetTaskConfig = function (id) {
        return this.GetConfigBase("TaskConfig", id);
    };
    ConfigMng.prototype.HasTaskConfig = function (id) {
        return this.HasConfigBase("TaskConfig", id);
    };
    ConfigMng.prototype.GetAllTaskConfig = function () {
        var configMap = new nano.Map();
        var map = this.GetAllConfigBase("TaskConfig");
        var keys = map.Keys();
        for (var i = 0; i < keys.length; i++) {
            configMap.Add(keys[i], map.Get(keys[i]));
        }
        return configMap;
    };
    ConfigMng.prototype.GetTigerDragonConfig = function (id) {
        return this.GetConfigBase("TigerDragonConfig", id);
    };
    ConfigMng.prototype.HasTigerDragonConfig = function (id) {
        return this.HasConfigBase("TigerDragonConfig", id);
    };
    ConfigMng.prototype.GetAllTigerDragonConfig = function () {
        var configMap = new nano.Map();
        var map = this.GetAllConfigBase("TigerDragonConfig");
        var keys = map.Keys();
        for (var i = 0; i < keys.length; i++) {
            configMap.Add(keys[i], map.Get(keys[i]));
        }
        return configMap;
    };
    ConfigMng._instance = null;
    return ConfigMng;
}(ConfigMngBase));
__reflect(ConfigMng.prototype, "ConfigMng");
