//--------------------------------------------------
// <auto-generated>
//      本文件由《纳米娱乐-游戏编辑器-数据工具》自动生成
// </auto-generated>
//--------------------------------------------------

class ConfigMng extends ConfigMngBase
{
	private static _instance:ConfigMng = null;
	public static get Instance():ConfigMng{
		return ConfigMng._instance;
	}
	public constructor() {
		super();
		ConfigMng._instance = this;
	}
	public GetResMap():nano.Map<string, string>{
		let resMap = new nano.Map<string, string>();
		resMap.Add("AchievementConfig", "Achievement_bytes");
		resMap.Add("AdviserConfig", "Adviser_bytes");
		resMap.Add("GeneralConfig", "General_bytes");
		resMap.Add("HegemonyConfig", "Hegemony_bytes");
		resMap.Add("ItemConfig", "Item_bytes");
		resMap.Add("LevelConfig", "Level_bytes");
		resMap.Add("MineConfig", "Mine_bytes");
		resMap.Add("OfficeConfig", "Office_bytes");
		resMap.Add("SkillConfig", "Skill_bytes");
		resMap.Add("StarConfig", "Star_bytes");
		resMap.Add("TaskConfig", "Task_bytes");
		resMap.Add("TigerDragonConfig", "TigerDragon_bytes");
		return resMap;
	}

	public GetAchievementConfig(id:number):AchievementConfig{
		return this.GetConfigBase("AchievementConfig", id) as AchievementConfig;
	}

	public HasAchievementConfig(id:number):boolean{
		return this.HasConfigBase("AchievementConfig", id);
	}

	public GetAllAchievementConfig():nano.Map<number, AchievementConfig>{
		let configMap:nano.Map<number, AchievementConfig> = new nano.Map<number, AchievementConfig>();
		let map = this.GetAllConfigBase("AchievementConfig");
		let keys = map.Keys();
		for(let i = 0; i < keys.length; i++){configMap.Add(keys[i], map.Get(keys[i]) as AchievementConfig);}
		return configMap;
	}

	public GetAdviserConfig(id:number):AdviserConfig{
		return this.GetConfigBase("AdviserConfig", id) as AdviserConfig;
	}

	public HasAdviserConfig(id:number):boolean{
		return this.HasConfigBase("AdviserConfig", id);
	}

	public GetAllAdviserConfig():nano.Map<number, AdviserConfig>{
		let configMap:nano.Map<number, AdviserConfig> = new nano.Map<number, AdviserConfig>();
		let map = this.GetAllConfigBase("AdviserConfig");
		let keys = map.Keys();
		for(let i = 0; i < keys.length; i++){configMap.Add(keys[i], map.Get(keys[i]) as AdviserConfig);}
		return configMap;
	}

	public GetGeneralConfig(id:number):GeneralConfig{
		return this.GetConfigBase("GeneralConfig", id) as GeneralConfig;
	}

	public HasGeneralConfig(id:number):boolean{
		return this.HasConfigBase("GeneralConfig", id);
	}

	public GetAllGeneralConfig():nano.Map<number, GeneralConfig>{
		let configMap:nano.Map<number, GeneralConfig> = new nano.Map<number, GeneralConfig>();
		let map = this.GetAllConfigBase("GeneralConfig");
		let keys = map.Keys();
		for(let i = 0; i < keys.length; i++){configMap.Add(keys[i], map.Get(keys[i]) as GeneralConfig);}
		return configMap;
	}

	public GetHegemonyConfig(id:number):HegemonyConfig{
		return this.GetConfigBase("HegemonyConfig", id) as HegemonyConfig;
	}

	public HasHegemonyConfig(id:number):boolean{
		return this.HasConfigBase("HegemonyConfig", id);
	}

	public GetAllHegemonyConfig():nano.Map<number, HegemonyConfig>{
		let configMap:nano.Map<number, HegemonyConfig> = new nano.Map<number, HegemonyConfig>();
		let map = this.GetAllConfigBase("HegemonyConfig");
		let keys = map.Keys();
		for(let i = 0; i < keys.length; i++){configMap.Add(keys[i], map.Get(keys[i]) as HegemonyConfig);}
		return configMap;
	}

	public GetItemConfig(id:number):ItemConfig{
		return this.GetConfigBase("ItemConfig", id) as ItemConfig;
	}

	public HasItemConfig(id:number):boolean{
		return this.HasConfigBase("ItemConfig", id);
	}

	public GetAllItemConfig():nano.Map<number, ItemConfig>{
		let configMap:nano.Map<number, ItemConfig> = new nano.Map<number, ItemConfig>();
		let map = this.GetAllConfigBase("ItemConfig");
		let keys = map.Keys();
		for(let i = 0; i < keys.length; i++){configMap.Add(keys[i], map.Get(keys[i]) as ItemConfig);}
		return configMap;
	}

	public GetLevelConfig(id:number):LevelConfig{
		return this.GetConfigBase("LevelConfig", id) as LevelConfig;
	}

	public HasLevelConfig(id:number):boolean{
		return this.HasConfigBase("LevelConfig", id);
	}

	public GetAllLevelConfig():nano.Map<number, LevelConfig>{
		let configMap:nano.Map<number, LevelConfig> = new nano.Map<number, LevelConfig>();
		let map = this.GetAllConfigBase("LevelConfig");
		let keys = map.Keys();
		for(let i = 0; i < keys.length; i++){configMap.Add(keys[i], map.Get(keys[i]) as LevelConfig);}
		return configMap;
	}

	public GetMineConfig(id:number):MineConfig{
		return this.GetConfigBase("MineConfig", id) as MineConfig;
	}

	public HasMineConfig(id:number):boolean{
		return this.HasConfigBase("MineConfig", id);
	}

	public GetAllMineConfig():nano.Map<number, MineConfig>{
		let configMap:nano.Map<number, MineConfig> = new nano.Map<number, MineConfig>();
		let map = this.GetAllConfigBase("MineConfig");
		let keys = map.Keys();
		for(let i = 0; i < keys.length; i++){configMap.Add(keys[i], map.Get(keys[i]) as MineConfig);}
		return configMap;
	}

	public GetOfficeConfig(id:number):OfficeConfig{
		return this.GetConfigBase("OfficeConfig", id) as OfficeConfig;
	}

	public HasOfficeConfig(id:number):boolean{
		return this.HasConfigBase("OfficeConfig", id);
	}

	public GetAllOfficeConfig():nano.Map<number, OfficeConfig>{
		let configMap:nano.Map<number, OfficeConfig> = new nano.Map<number, OfficeConfig>();
		let map = this.GetAllConfigBase("OfficeConfig");
		let keys = map.Keys();
		for(let i = 0; i < keys.length; i++){configMap.Add(keys[i], map.Get(keys[i]) as OfficeConfig);}
		return configMap;
	}

	public GetSkillConfig(id:number):SkillConfig{
		return this.GetConfigBase("SkillConfig", id) as SkillConfig;
	}

	public HasSkillConfig(id:number):boolean{
		return this.HasConfigBase("SkillConfig", id);
	}

	public GetAllSkillConfig():nano.Map<number, SkillConfig>{
		let configMap:nano.Map<number, SkillConfig> = new nano.Map<number, SkillConfig>();
		let map = this.GetAllConfigBase("SkillConfig");
		let keys = map.Keys();
		for(let i = 0; i < keys.length; i++){configMap.Add(keys[i], map.Get(keys[i]) as SkillConfig);}
		return configMap;
	}

	public GetStarConfig(id:number):StarConfig{
		return this.GetConfigBase("StarConfig", id) as StarConfig;
	}

	public HasStarConfig(id:number):boolean{
		return this.HasConfigBase("StarConfig", id);
	}

	public GetAllStarConfig():nano.Map<number, StarConfig>{
		let configMap:nano.Map<number, StarConfig> = new nano.Map<number, StarConfig>();
		let map = this.GetAllConfigBase("StarConfig");
		let keys = map.Keys();
		for(let i = 0; i < keys.length; i++){configMap.Add(keys[i], map.Get(keys[i]) as StarConfig);}
		return configMap;
	}

	public GetTaskConfig(id:number):TaskConfig{
		return this.GetConfigBase("TaskConfig", id) as TaskConfig;
	}

	public HasTaskConfig(id:number):boolean{
		return this.HasConfigBase("TaskConfig", id);
	}

	public GetAllTaskConfig():nano.Map<number, TaskConfig>{
		let configMap:nano.Map<number, TaskConfig> = new nano.Map<number, TaskConfig>();
		let map = this.GetAllConfigBase("TaskConfig");
		let keys = map.Keys();
		for(let i = 0; i < keys.length; i++){configMap.Add(keys[i], map.Get(keys[i]) as TaskConfig);}
		return configMap;
	}

	public GetTigerDragonConfig(id:number):TigerDragonConfig{
		return this.GetConfigBase("TigerDragonConfig", id) as TigerDragonConfig;
	}

	public HasTigerDragonConfig(id:number):boolean{
		return this.HasConfigBase("TigerDragonConfig", id);
	}

	public GetAllTigerDragonConfig():nano.Map<number, TigerDragonConfig>{
		let configMap:nano.Map<number, TigerDragonConfig> = new nano.Map<number, TigerDragonConfig>();
		let map = this.GetAllConfigBase("TigerDragonConfig");
		let keys = map.Keys();
		for(let i = 0; i < keys.length; i++){configMap.Add(keys[i], map.Get(keys[i]) as TigerDragonConfig);}
		return configMap;
	}

}
